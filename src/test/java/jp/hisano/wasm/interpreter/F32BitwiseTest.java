package jp.hisano.wasm.interpreter;

import java.io.IOException;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static jp.hisano.wasm.interpreter.TestUtils.*;
import static org.junit.jupiter.api.Assertions.*;

class F32BitwiseTest {
	@ParameterizedTest(name = "copysign({0},{1}) = {2} (f32.copysign)")
	@CsvSource({
		"-0x0p+0,-0x0p+0,-0x0p+0",
		"-0x0p+0,0x0p+0,0x0p+0",
		"0x0p+0,-0x0p+0,-0x0p+0",
		"0x0p+0,0x0p+0,0x0p+0",
		"-0x0p+0,-0x1p-149,-0x0p+0",
		"-0x0p+0,0x1p-149,0x0p+0",
		"0x0p+0,-0x1p-149,-0x0p+0",
		"0x0p+0,0x1p-149,0x0p+0",
		"-0x0p+0,-0x1p-126,-0x0p+0",
		"-0x0p+0,0x1p-126,0x0p+0",
		"0x0p+0,-0x1p-126,-0x0p+0",
		"0x0p+0,0x1p-126,0x0p+0",
		"-0x0p+0,-0x1p-1,-0x0p+0",
		"-0x0p+0,0x1p-1,0x0p+0",
		"0x0p+0,-0x1p-1,-0x0p+0",
		"0x0p+0,0x1p-1,0x0p+0",
		"-0x0p+0,-0x1p+0,-0x0p+0",
		"-0x0p+0,0x1p+0,0x0p+0",
		"0x0p+0,-0x1p+0,-0x0p+0",
		"0x0p+0,0x1p+0,0x0p+0",
		"-0x0p+0,-0x1.921fb6p+2,-0x0p+0",
		"-0x0p+0,0x1.921fb6p+2,0x0p+0",
		"0x0p+0,-0x1.921fb6p+2,-0x0p+0",
		"0x0p+0,0x1.921fb6p+2,0x0p+0",
		"-0x0p+0,-0x1.fffffep+127,-0x0p+0",
		"-0x0p+0,0x1.fffffep+127,0x0p+0",
		"0x0p+0,-0x1.fffffep+127,-0x0p+0",
		"0x0p+0,0x1.fffffep+127,0x0p+0",
		"-0x0p+0,-inf,-0x0p+0",
		"-0x0p+0,inf,0x0p+0",
		"0x0p+0,-inf,-0x0p+0",
		"0x0p+0,inf,0x0p+0",
		"-0x0p+0,-nan,-0x0p+0",
		"-0x0p+0,nan,0x0p+0",
		"0x0p+0,-nan,-0x0p+0",
		"0x0p+0,nan,0x0p+0",
		"-0x1p-149,-0x0p+0,-0x1p-149",
		"-0x1p-149,0x0p+0,0x1p-149",
		"0x1p-149,-0x0p+0,-0x1p-149",
		"0x1p-149,0x0p+0,0x1p-149",
		"-0x1p-149,-0x1p-149,-0x1p-149",
		"-0x1p-149,0x1p-149,0x1p-149",
		"0x1p-149,-0x1p-149,-0x1p-149",
		"0x1p-149,0x1p-149,0x1p-149",
		"-0x1p-149,-0x1p-126,-0x1p-149",
		"-0x1p-149,0x1p-126,0x1p-149",
		"0x1p-149,-0x1p-126,-0x1p-149",
		"0x1p-149,0x1p-126,0x1p-149",
		"-0x1p-149,-0x1p-1,-0x1p-149",
		"-0x1p-149,0x1p-1,0x1p-149",
		"0x1p-149,-0x1p-1,-0x1p-149",
		"0x1p-149,0x1p-1,0x1p-149",
		"-0x1p-149,-0x1p+0,-0x1p-149",
		"-0x1p-149,0x1p+0,0x1p-149",
		"0x1p-149,-0x1p+0,-0x1p-149",
		"0x1p-149,0x1p+0,0x1p-149",
		"-0x1p-149,-0x1.921fb6p+2,-0x1p-149",
		"-0x1p-149,0x1.921fb6p+2,0x1p-149",
		"0x1p-149,-0x1.921fb6p+2,-0x1p-149",
		"0x1p-149,0x1.921fb6p+2,0x1p-149",
		"-0x1p-149,-0x1.fffffep+127,-0x1p-149",
		"-0x1p-149,0x1.fffffep+127,0x1p-149",
		"0x1p-149,-0x1.fffffep+127,-0x1p-149",
		"0x1p-149,0x1.fffffep+127,0x1p-149",
		"-0x1p-149,-inf,-0x1p-149",
		"-0x1p-149,inf,0x1p-149",
		"0x1p-149,-inf,-0x1p-149",
		"0x1p-149,inf,0x1p-149",
		"-0x1p-149,-nan,-0x1p-149",
		"-0x1p-149,nan,0x1p-149",
		"0x1p-149,-nan,-0x1p-149",
		"0x1p-149,nan,0x1p-149",
		"-0x1p-126,-0x0p+0,-0x1p-126",
		"-0x1p-126,0x0p+0,0x1p-126",
		"0x1p-126,-0x0p+0,-0x1p-126",
		"0x1p-126,0x0p+0,0x1p-126",
		"-0x1p-126,-0x1p-149,-0x1p-126",
		"-0x1p-126,0x1p-149,0x1p-126",
		"0x1p-126,-0x1p-149,-0x1p-126",
		"0x1p-126,0x1p-149,0x1p-126",
		"-0x1p-126,-0x1p-126,-0x1p-126",
		"-0x1p-126,0x1p-126,0x1p-126",
		"0x1p-126,-0x1p-126,-0x1p-126",
		"0x1p-126,0x1p-126,0x1p-126",
		"-0x1p-126,-0x1p-1,-0x1p-126",
		"-0x1p-126,0x1p-1,0x1p-126",
		"0x1p-126,-0x1p-1,-0x1p-126",
		"0x1p-126,0x1p-1,0x1p-126",
		"-0x1p-126,-0x1p+0,-0x1p-126",
		"-0x1p-126,0x1p+0,0x1p-126",
		"0x1p-126,-0x1p+0,-0x1p-126",
		"0x1p-126,0x1p+0,0x1p-126",
		"-0x1p-126,-0x1.921fb6p+2,-0x1p-126",
		"-0x1p-126,0x1.921fb6p+2,0x1p-126",
		"0x1p-126,-0x1.921fb6p+2,-0x1p-126",
		"0x1p-126,0x1.921fb6p+2,0x1p-126",
		"-0x1p-126,-0x1.fffffep+127,-0x1p-126",
		"-0x1p-126,0x1.fffffep+127,0x1p-126",
		"0x1p-126,-0x1.fffffep+127,-0x1p-126",
		"0x1p-126,0x1.fffffep+127,0x1p-126",
		"-0x1p-126,-inf,-0x1p-126",
		"-0x1p-126,inf,0x1p-126",
		"0x1p-126,-inf,-0x1p-126",
		"0x1p-126,inf,0x1p-126",
		"-0x1p-126,-nan,-0x1p-126",
		"-0x1p-126,nan,0x1p-126",
		"0x1p-126,-nan,-0x1p-126",
		"0x1p-126,nan,0x1p-126",
		"-0x1p-1,-0x0p+0,-0x1p-1",
		"-0x1p-1,0x0p+0,0x1p-1",
		"0x1p-1,-0x0p+0,-0x1p-1",
		"0x1p-1,0x0p+0,0x1p-1",
		"-0x1p-1,-0x1p-149,-0x1p-1",
		"-0x1p-1,0x1p-149,0x1p-1",
		"0x1p-1,-0x1p-149,-0x1p-1",
		"0x1p-1,0x1p-149,0x1p-1",
		"-0x1p-1,-0x1p-126,-0x1p-1",
		"-0x1p-1,0x1p-126,0x1p-1",
		"0x1p-1,-0x1p-126,-0x1p-1",
		"0x1p-1,0x1p-126,0x1p-1",
		"-0x1p-1,-0x1p-1,-0x1p-1",
		"-0x1p-1,0x1p-1,0x1p-1",
		"0x1p-1,-0x1p-1,-0x1p-1",
		"0x1p-1,0x1p-1,0x1p-1",
		"-0x1p-1,-0x1p+0,-0x1p-1",
		"-0x1p-1,0x1p+0,0x1p-1",
		"0x1p-1,-0x1p+0,-0x1p-1",
		"0x1p-1,0x1p+0,0x1p-1",
		"-0x1p-1,-0x1.921fb6p+2,-0x1p-1",
		"-0x1p-1,0x1.921fb6p+2,0x1p-1",
		"0x1p-1,-0x1.921fb6p+2,-0x1p-1",
		"0x1p-1,0x1.921fb6p+2,0x1p-1",
		"-0x1p-1,-0x1.fffffep+127,-0x1p-1",
		"-0x1p-1,0x1.fffffep+127,0x1p-1",
		"0x1p-1,-0x1.fffffep+127,-0x1p-1",
		"0x1p-1,0x1.fffffep+127,0x1p-1",
		"-0x1p-1,-inf,-0x1p-1",
		"-0x1p-1,inf,0x1p-1",
		"0x1p-1,-inf,-0x1p-1",
		"0x1p-1,inf,0x1p-1",
		"-0x1p-1,-nan,-0x1p-1",
		"-0x1p-1,nan,0x1p-1",
		"0x1p-1,-nan,-0x1p-1",
		"0x1p-1,nan,0x1p-1",
		"-0x1p+0,-0x0p+0,-0x1p+0",
		"-0x1p+0,0x0p+0,0x1p+0",
		"0x1p+0,-0x0p+0,-0x1p+0",
		"0x1p+0,0x0p+0,0x1p+0",
		"-0x1p+0,-0x1p-149,-0x1p+0",
		"-0x1p+0,0x1p-149,0x1p+0",
		"0x1p+0,-0x1p-149,-0x1p+0",
		"0x1p+0,0x1p-149,0x1p+0",
		"-0x1p+0,-0x1p-126,-0x1p+0",
		"-0x1p+0,0x1p-126,0x1p+0",
		"0x1p+0,-0x1p-126,-0x1p+0",
		"0x1p+0,0x1p-126,0x1p+0",
		"-0x1p+0,-0x1p-1,-0x1p+0",
		"-0x1p+0,0x1p-1,0x1p+0",
		"0x1p+0,-0x1p-1,-0x1p+0",
		"0x1p+0,0x1p-1,0x1p+0",
		"-0x1p+0,-0x1p+0,-0x1p+0",
		"-0x1p+0,0x1p+0,0x1p+0",
		"0x1p+0,-0x1p+0,-0x1p+0",
		"0x1p+0,0x1p+0,0x1p+0",
		"-0x1p+0,-0x1.921fb6p+2,-0x1p+0",
		"-0x1p+0,0x1.921fb6p+2,0x1p+0",
		"0x1p+0,-0x1.921fb6p+2,-0x1p+0",
		"0x1p+0,0x1.921fb6p+2,0x1p+0",
		"-0x1p+0,-0x1.fffffep+127,-0x1p+0",
		"-0x1p+0,0x1.fffffep+127,0x1p+0",
		"0x1p+0,-0x1.fffffep+127,-0x1p+0",
		"0x1p+0,0x1.fffffep+127,0x1p+0",
		"-0x1p+0,-inf,-0x1p+0",
		"-0x1p+0,inf,0x1p+0",
		"0x1p+0,-inf,-0x1p+0",
		"0x1p+0,inf,0x1p+0",
		"-0x1p+0,-nan,-0x1p+0",
		"-0x1p+0,nan,0x1p+0",
		"0x1p+0,-nan,-0x1p+0",
		"0x1p+0,nan,0x1p+0",
		"-0x1.921fb6p+2,-0x0p+0,-0x1.921fb6p+2",
		"-0x1.921fb6p+2,0x0p+0,0x1.921fb6p+2",
		"0x1.921fb6p+2,-0x0p+0,-0x1.921fb6p+2",
		"0x1.921fb6p+2,0x0p+0,0x1.921fb6p+2",
		"-0x1.921fb6p+2,-0x1p-149,-0x1.921fb6p+2",
		"-0x1.921fb6p+2,0x1p-149,0x1.921fb6p+2",
		"0x1.921fb6p+2,-0x1p-149,-0x1.921fb6p+2",
		"0x1.921fb6p+2,0x1p-149,0x1.921fb6p+2",
		"-0x1.921fb6p+2,-0x1p-126,-0x1.921fb6p+2",
		"-0x1.921fb6p+2,0x1p-126,0x1.921fb6p+2",
		"0x1.921fb6p+2,-0x1p-126,-0x1.921fb6p+2",
		"0x1.921fb6p+2,0x1p-126,0x1.921fb6p+2",
		"-0x1.921fb6p+2,-0x1p-1,-0x1.921fb6p+2",
		"-0x1.921fb6p+2,0x1p-1,0x1.921fb6p+2",
		"0x1.921fb6p+2,-0x1p-1,-0x1.921fb6p+2",
		"0x1.921fb6p+2,0x1p-1,0x1.921fb6p+2",
		"-0x1.921fb6p+2,-0x1p+0,-0x1.921fb6p+2",
		"-0x1.921fb6p+2,0x1p+0,0x1.921fb6p+2",
		"0x1.921fb6p+2,-0x1p+0,-0x1.921fb6p+2",
		"0x1.921fb6p+2,0x1p+0,0x1.921fb6p+2",
		"-0x1.921fb6p+2,-0x1.921fb6p+2,-0x1.921fb6p+2",
		"-0x1.921fb6p+2,0x1.921fb6p+2,0x1.921fb6p+2",
		"0x1.921fb6p+2,-0x1.921fb6p+2,-0x1.921fb6p+2",
		"0x1.921fb6p+2,0x1.921fb6p+2,0x1.921fb6p+2",
		"-0x1.921fb6p+2,-0x1.fffffep+127,-0x1.921fb6p+2",
		"-0x1.921fb6p+2,0x1.fffffep+127,0x1.921fb6p+2",
		"0x1.921fb6p+2,-0x1.fffffep+127,-0x1.921fb6p+2",
		"0x1.921fb6p+2,0x1.fffffep+127,0x1.921fb6p+2",
		"-0x1.921fb6p+2,-inf,-0x1.921fb6p+2",
		"-0x1.921fb6p+2,inf,0x1.921fb6p+2",
		"0x1.921fb6p+2,-inf,-0x1.921fb6p+2",
		"0x1.921fb6p+2,inf,0x1.921fb6p+2",
		"-0x1.921fb6p+2,-nan,-0x1.921fb6p+2",
		"-0x1.921fb6p+2,nan,0x1.921fb6p+2",
		"0x1.921fb6p+2,-nan,-0x1.921fb6p+2",
		"0x1.921fb6p+2,nan,0x1.921fb6p+2",
		"-0x1.fffffep+127,-0x0p+0,-0x1.fffffep+127",
		"-0x1.fffffep+127,0x0p+0,0x1.fffffep+127",
		"0x1.fffffep+127,-0x0p+0,-0x1.fffffep+127",
		"0x1.fffffep+127,0x0p+0,0x1.fffffep+127",
		"-0x1.fffffep+127,-0x1p-149,-0x1.fffffep+127",
		"-0x1.fffffep+127,0x1p-149,0x1.fffffep+127",
		"0x1.fffffep+127,-0x1p-149,-0x1.fffffep+127",
		"0x1.fffffep+127,0x1p-149,0x1.fffffep+127",
		"-0x1.fffffep+127,-0x1p-126,-0x1.fffffep+127",
		"-0x1.fffffep+127,0x1p-126,0x1.fffffep+127",
		"0x1.fffffep+127,-0x1p-126,-0x1.fffffep+127",
		"0x1.fffffep+127,0x1p-126,0x1.fffffep+127",
		"-0x1.fffffep+127,-0x1p-1,-0x1.fffffep+127",
		"-0x1.fffffep+127,0x1p-1,0x1.fffffep+127",
		"0x1.fffffep+127,-0x1p-1,-0x1.fffffep+127",
		"0x1.fffffep+127,0x1p-1,0x1.fffffep+127",
		"-0x1.fffffep+127,-0x1p+0,-0x1.fffffep+127",
		"-0x1.fffffep+127,0x1p+0,0x1.fffffep+127",
		"0x1.fffffep+127,-0x1p+0,-0x1.fffffep+127",
		"0x1.fffffep+127,0x1p+0,0x1.fffffep+127",
		"-0x1.fffffep+127,-0x1.921fb6p+2,-0x1.fffffep+127",
		"-0x1.fffffep+127,0x1.921fb6p+2,0x1.fffffep+127",
		"0x1.fffffep+127,-0x1.921fb6p+2,-0x1.fffffep+127",
		"0x1.fffffep+127,0x1.921fb6p+2,0x1.fffffep+127",
		"-0x1.fffffep+127,-0x1.fffffep+127,-0x1.fffffep+127",
		"-0x1.fffffep+127,0x1.fffffep+127,0x1.fffffep+127",
		"0x1.fffffep+127,-0x1.fffffep+127,-0x1.fffffep+127",
		"0x1.fffffep+127,0x1.fffffep+127,0x1.fffffep+127",
		"-0x1.fffffep+127,-inf,-0x1.fffffep+127",
		"-0x1.fffffep+127,inf,0x1.fffffep+127",
		"0x1.fffffep+127,-inf,-0x1.fffffep+127",
		"0x1.fffffep+127,inf,0x1.fffffep+127",
		"-0x1.fffffep+127,-nan,-0x1.fffffep+127",
		"-0x1.fffffep+127,nan,0x1.fffffep+127",
		"0x1.fffffep+127,-nan,-0x1.fffffep+127",
		"0x1.fffffep+127,nan,0x1.fffffep+127",
		"-inf,-0x0p+0,-inf",
		"-inf,0x0p+0,inf",
		"inf,-0x0p+0,-inf",
		"inf,0x0p+0,inf",
		"-inf,-0x1p-149,-inf",
		"-inf,0x1p-149,inf",
		"inf,-0x1p-149,-inf",
		"inf,0x1p-149,inf",
		"-inf,-0x1p-126,-inf",
		"-inf,0x1p-126,inf",
		"inf,-0x1p-126,-inf",
		"inf,0x1p-126,inf",
		"-inf,-0x1p-1,-inf",
		"-inf,0x1p-1,inf",
		"inf,-0x1p-1,-inf",
		"inf,0x1p-1,inf",
		"-inf,-0x1p+0,-inf",
		"-inf,0x1p+0,inf",
		"inf,-0x1p+0,-inf",
		"inf,0x1p+0,inf",
		"-inf,-0x1.921fb6p+2,-inf",
		"-inf,0x1.921fb6p+2,inf",
		"inf,-0x1.921fb6p+2,-inf",
		"inf,0x1.921fb6p+2,inf",
		"-inf,-0x1.fffffep+127,-inf",
		"-inf,0x1.fffffep+127,inf",
		"inf,-0x1.fffffep+127,-inf",
		"inf,0x1.fffffep+127,inf",
		"-inf,-inf,-inf",
		"-inf,inf,inf",
		"inf,-inf,-inf",
		"inf,inf,inf",
		"-inf,-nan,-inf",
		"-inf,nan,inf",
		"inf,-nan,-inf",
		"inf,nan,inf",
		"-nan,-0x0p+0,-nan",
		"-nan,0x0p+0,nan",
		"nan,-0x0p+0,-nan",
		"nan,0x0p+0,nan",
		"-nan,-0x1p-149,-nan",
		"-nan,0x1p-149,nan",
		"nan,-0x1p-149,-nan",
		"nan,0x1p-149,nan",
		"-nan,-0x1p-126,-nan",
		"-nan,0x1p-126,nan",
		"nan,-0x1p-126,-nan",
		"nan,0x1p-126,nan",
		"-nan,-0x1p-1,-nan",
		"-nan,0x1p-1,nan",
		"nan,-0x1p-1,-nan",
		"nan,0x1p-1,nan",
		"-nan,-0x1p+0,-nan",
		"-nan,0x1p+0,nan",
		"nan,-0x1p+0,-nan",
		"nan,0x1p+0,nan",
		"-nan,-0x1.921fb6p+2,-nan",
		"-nan,0x1.921fb6p+2,nan",
		"nan,-0x1.921fb6p+2,-nan",
		"nan,0x1.921fb6p+2,nan",
		"-nan,-0x1.fffffep+127,-nan",
		"-nan,0x1.fffffep+127,nan",
		"nan,-0x1.fffffep+127,-nan",
		"nan,0x1.fffffep+127,nan",
		"-nan,-inf,-nan",
		"-nan,inf,nan",
		"nan,-inf,-nan",
		"nan,inf,nan",
		"-nan,-nan,-nan",
		"-nan,nan,nan",
		"nan,-nan,-nan",
		"nan,nan,nan",
	})
	void copysign(@WastValue float first, @WastValue float second, @WastValue float expectedValue) throws IOException {
		invoke("copysign", first, second, expectedValue);
	}

	@ParameterizedTest(name = "abs({0}) = {1} (f32.abs)")
	@CsvSource({
		"-0x0p+0,0x0p+0",
		"0x0p+0,0x0p+0",
		"-0x1p-149,0x1p-149",
		"0x1p-149,0x1p-149",
		"-0x1p-126,0x1p-126",
		"0x1p-126,0x1p-126",
		"-0x1p-1,0x1p-1",
		"0x1p-1,0x1p-1",
		"-0x1p+0,0x1p+0",
		"0x1p+0,0x1p+0",
		"-0x1.921fb6p+2,0x1.921fb6p+2",
		"0x1.921fb6p+2,0x1.921fb6p+2",
		"-0x1.fffffep+127,0x1.fffffep+127",
		"0x1.fffffep+127,0x1.fffffep+127",
		"-inf,inf",
		"inf,inf",
		"-nan,nan",
		"nan,nan",
	})
	void abs(@WastValue float value, @WastValue float expectedValue) throws IOException {
		invoke("abs", value,expectedValue);
	}

	@ParameterizedTest(name = "neg({0}) = {1} (f32.neg)")
	@CsvSource({
			"-1,1",
	})
	void neg(float value, float expectedValue) throws IOException {
		invoke("neg", value,expectedValue);
	}

	private static void invoke(String operatorName, float value, float expectedValue) throws IOException {
		float resultValue = createInterpreter("spec/f32_bitwise/f32_bitwise.0.wasm").invoke(operatorName, value);
		assertEquals(expectedValue, resultValue);
	}

	private static void invoke(String operatorName, float first, float second, float expectedValue) throws IOException {
		float resultValue = createInterpreter("spec/f32_bitwise/f32_bitwise.0.wasm").invoke(operatorName, first, second);
		assertEquals(expectedValue, resultValue);
	}
}
